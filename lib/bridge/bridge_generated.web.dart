// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class BridgePlatform extends FlutterRustBridgeBase<BridgeWire>
    with FlutterRustBridgeSetupMixin {
  BridgePlatform(FutureOr<WasmModule> dylib) : super(BridgeWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_MutexEndpointsOnRustThread(MutexEndpointsOnRustThread raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_serialized(Serialized raw) {
    return api2wire_serialized(raw);
  }

  @protected
  List<dynamic> api2wire_serialized(Serialized raw) {
    return [api2wire_uint_8_list(raw.bytes), api2wire_String(raw.formula)];
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
// Section: finalizer

  late final Finalizer<PlatformPointer> _MutexEndpointsOnRustThreadFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_MutexEndpointsOnRustThread);
  Finalizer<PlatformPointer> get MutexEndpointsOnRustThreadFinalizer =>
      _MutexEndpointsOnRustThreadFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external BridgeWasmModule get wasmModule;

@JS()
@anonymous
class BridgeWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external BridgeWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_prepare_viewmodel_update_stream(
      NativePortType port_);

  external dynamic /* void */ wire_prepare_view_update_stream(
      NativePortType port_);

  external dynamic /* Object */ wire_prepare_channels();

  external dynamic /* void */ wire_lay_endpoints_on_rust_thread(
      NativePortType port_, Object rust_opaque);

  external dynamic /* void */ wire_start_rust_logic(NativePortType port_);

  external dynamic /* void */ wire_send_user_action(
      String task_address, List<dynamic> serialized);

  external dynamic /* void */ wire_clean_viewmodel();

  external dynamic /* List<dynamic>? */ wire_read_viewmodel(
      String item_address);

  external dynamic /*  */ drop_opaque_MutexEndpointsOnRustThread(ptr);

  external int /* *const c_void */ share_opaque_MutexEndpointsOnRustThread(ptr);
}

// Section: WASM wire connector

class BridgeWire extends FlutterRustBridgeWasmWireBase<BridgeWasmModule> {
  BridgeWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<BridgeWasmModule>(module));

  void wire_prepare_viewmodel_update_stream(NativePortType port_) =>
      wasmModule.wire_prepare_viewmodel_update_stream(port_);

  void wire_prepare_view_update_stream(NativePortType port_) =>
      wasmModule.wire_prepare_view_update_stream(port_);

  dynamic /* Object */ wire_prepare_channels() =>
      wasmModule.wire_prepare_channels();

  void wire_lay_endpoints_on_rust_thread(
          NativePortType port_, Object rust_opaque) =>
      wasmModule.wire_lay_endpoints_on_rust_thread(port_, rust_opaque);

  void wire_start_rust_logic(NativePortType port_) =>
      wasmModule.wire_start_rust_logic(port_);

  dynamic /* void */ wire_send_user_action(
          String task_address, List<dynamic> serialized) =>
      wasmModule.wire_send_user_action(task_address, serialized);

  dynamic /* void */ wire_clean_viewmodel() =>
      wasmModule.wire_clean_viewmodel();

  dynamic /* List<dynamic>? */ wire_read_viewmodel(String item_address) =>
      wasmModule.wire_read_viewmodel(item_address);

  dynamic /*  */ drop_opaque_MutexEndpointsOnRustThread(ptr) =>
      wasmModule.drop_opaque_MutexEndpointsOnRustThread(ptr);

  int /* *const c_void */ share_opaque_MutexEndpointsOnRustThread(ptr) =>
      wasmModule.share_opaque_MutexEndpointsOnRustThread(ptr);
}
